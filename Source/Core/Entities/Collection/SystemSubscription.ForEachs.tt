<#@ template language="C#" #>
<#@ include file="Collection.ttinclude"#>
using System;

namespace Coorth {
    public readonly partial struct SystemSubscription<TEvent> where TEvent : IEvent {
<# 
    const int COUNT = 3;
    var variants = GetActionVariants();
    
    for (var count = 1; count <= COUNT; count++) {
        var templates = GetTemplates(count);
        var constraints = GetConstraints(count);
#>

        #region Component<#=count#>

<#
        foreach (var variant in variants) {
            for (int index = 0; index <= count; index++) {
                if (variant.IsAction && index > 0) {
                    continue;
                }
                var actionName = variant.GetActionTemplate(index) + templates + ">";
#>
        public void ForEach<<#=templates#>>(<#= actionName #> action) <#= constraints #> {
            var reaction = system.CreateReaction<TEvent>();
            var sandbox = system.Sandbox;
<# for(var i =1; i<= count;i++) { #>
            reaction.Include<T<#=i#>>();
<#}#>
<#if(count == 1) {#>
            reaction.OnEvent((in TEvent <#= variant.HasEvent? "e" :"_" #>) => {
                ComponentCollection<T1> components = sandbox.GetComponents<T1>();
                components.ForEach(<#= variant.HasEvent? "in e, " :"" #>action);
            });
<#} else if(count <= 3) {#>
<#if(count == 2) {#>
            if (sandbox.GetBinding<T1>().HasDependency<T2>()) {
<#} else if(count == 3) {#>
            if (sandbox.GetBinding<T1>().HasDependency<T2>() && sandbox.GetBinding<T1>().HasDependency<T3>()) {
<#} else {#>
            throw new NotImplementException();
<#}#>
                var matcher = Matcher.Include<<#=templates#>>();
                reaction.OnEvent((in TEvent <#= variant.HasEvent? "e" :"_" #>) => {
                    EntityCollection entities = sandbox.GetEntities(matcher);
                    entities.ForEach(<#= variant.HasEvent? "in e, " :"" #>action);
                });
            } else {
                reaction.OnEvent((in TEvent <#= variant.HasEvent? "e" :"_" #>) => {
                    ComponentCollection<<#=templates#>> components = sandbox.GetComponents<<#=templates#>>();
                    components.ForEach(<#= variant.HasEvent? "in e, " :"" #>action);
                });
            }
<#}#>
        }

<#
            }
        }
#>
        #endregion
<#
    }
#>
    }
}