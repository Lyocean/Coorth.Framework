<#@ template language="C#" #>
<#@ include file="Common.ttinclude" #>
namespace Coorth.Framework; 

public partial class Matcher {
  
<#
    for (var count = 1; count <= COMPONENT_COUNT; count++) {
        var templates = CreateParameters(count, i => $"T{i}", ", ");
        var contracts = CreateParameters(count, i => $"where T{i} : IComponent", " ");
#>
    public Matcher WithAll<<#=templates#>>() <#=contracts#> {
        return WithAll(ComponentTypes<<#=templates#>>.Types);
    }
    
    public Matcher WithNot<<#=templates#>>() <#=contracts#> {
        return WithNot(ComponentTypes<<#=templates#>>.Types);
    }

    public Matcher WithAny<<#=templates#>>() <#=contracts#> {
        return WithAny(ComponentTypes<<#=templates#>>.Types);
    }

    private struct AllMatcher<<#=templates#>> <#=contracts#> {
        public static readonly Matcher Instance;
        
        static AllMatcher() {
            Instance = (new Matcher()).WithAll<<#=templates#>>();
        }
    }
    
    public static Matcher All<<#=templates#>>() <#=contracts#> {
        return AllMatcher<<#=templates#>>.Instance;
    }
    
<#
    }
#>
}