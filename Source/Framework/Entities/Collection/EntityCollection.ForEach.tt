<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Collection.ttinclude"#>
using System;

namespace Coorth.Framework;

public readonly partial struct EntityCollection {
<# 
const int COUNT = 5;
var variants = GetActionVariants();

for (var count = 1; count <= COUNT; count++) { 
    var templates = GetTemplates(count);
    var constraints = GetConstraints(count);
#>

    #region Component<#=count#>

<#
    foreach (var variant in variants) {
        for (int index = 0; index <= count; index++) {
            if (variant.IsAction && index > 0) {
                continue;
            }
#>
    public void ForEach<<#= variant.GetEventTemplate(false) #><#= templates #>>(<#= variant.GetEventParameter() #><#= variant.GetActionTemplate(index) #><#= templates #>> action) <#= constraints #> {
        var sandbox = archetypeGroup.Sandbox;
        var archetypes = archetypeGroup.Archetypes;
<# for (var i = 1; i <= count; i++) { #>
        var componentGroup<#=i#> = sandbox.GetComponentGroup<T<#=i#>>();
<# } #>
        for(var i = 0; i < archetypes.Length; i++) {
            var archetype = archetypes[i];
            for(var j = 0; j < archetype.EntityCapacity; j++) {
                var index = archetype.GetEntity(j);
                if(index < 0) {
                    continue;
                }
                ref var context = ref sandbox.GetContext(index);
<# for (var i = 1; i <= count; i++) { #>
                ref var component<#=i#> = ref componentGroup<#=i#>.Get(context.Get(componentGroup<#=i#>.TypeId));
<# } #>
                action(<#=variant.GetActionParameter(count, index)#>);
            }
        }
    }

<#
        }
    }
#>

    #endregion
<# } #>
}
