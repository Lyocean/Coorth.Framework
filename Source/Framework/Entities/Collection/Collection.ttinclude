<#+
    static string GetList1(int start, int end, string prefix, string suffix, string separator) {
        var text = "";
        for (var i = start; i <= end; i++) {
            text += i == end ? $"{prefix}{i}{suffix}" : $"{prefix}{i}{suffix}{separator}";
        }
        return text;
    }
    
    static string GetList3(int start, int end, string prefix, string infix, string suffix, string separator) {
        var text = "";
        for (var i = start; i <= end; i++) {
            text += i == end ? $"{prefix}{i}{infix}{i}{suffix}" : $"{prefix}{i}{infix}{i}{suffix}{separator}";
        }
        return text;
    }
    
    static string GetList2(int start, int end, int indent, string prefix, string infix, string suffix) {
        var text = "";
        for (var i = start; i <= end; i++) {
            text += new string(' ', indent * 4);
            text += $"{prefix}{i}{infix}{i}{suffix}";
        }
        return text;
    }

    static  string GetParams(int count, int pos, string name) {
        var text = "";
        for (var j = 1; j <= count; j++) {
            if (j > (count - pos)) {
                text += $"ref {name}{j}";
            }
            else {
                text += $"in {name}{j}";
            }
            if (j != count) {
                text += ", ";
            }
        }
        return text;
    }

    static string GetTemplates(int i) {
        return GetList1(1, i, "T", "",", ");
    }

    static string GetConstraints(int i) {
        return GetList1(1, i, "where T", " : IComponent"," ");
    }
    
    static string GetCompParams(int i) {
        return GetList1(1, i, "component", "",", ");
    }

    public readonly struct ActionVariant {

        public readonly bool HasEvent;

        public readonly bool HasEntity;

        public readonly bool IsAction;
        
        public ActionVariant(bool hasEvent, bool hasEntity, bool isAction) {
            this.HasEvent = hasEvent;
            this.HasEntity = hasEntity;
            this.IsAction = isAction;
        }

        public string GetEventTemplate(bool bracket) {
            return HasEvent ? (bracket ? $"<TEvent>" : "TEvent, ") : "";
        }
        
        public string GetEventParameter() {
            return HasEvent ? "in TEvent e, " : "";
        }

        public string GetActionTemplate(int i) {
            var eventTemplate = HasEvent ? "TEvent, " : "";
            var entityTemplate = HasEntity ? "Entity, " : "";
            var actionName = IsAction ? "Action" : "EventAction";
            var refName = (i == 0) ? "" : ((i == 1) ? "R" : $"R{i}");
            return $"{actionName}{refName}<{eventTemplate}{entityTemplate}";
        }
        
        public string GetActionParameter(int count, int index) {
            string componentParams = IsAction ? GetCompParams(count) : GetParams(count, index, "component");
            var eventParameter = HasEvent ? (IsAction ? "e, " : "in e, ") : "";
            var entityParameter = HasEntity ? "context.GetEntity(sandbox), " : "";
            return $"{eventParameter}{entityParameter}{componentParams}";
        }
    }
    
    ActionVariant[] GetActionVariants() {
        return new[] {
            new ActionVariant(false, false, true),
            new ActionVariant(false, true, true),
            new ActionVariant(true, false, true),
            new ActionVariant(true, true, true),
        
            new ActionVariant(false, false, false),
            new ActionVariant(false, true, false),
            new ActionVariant(true, false, false),
            new ActionVariant(true, true, false),
        };
    }
#>
